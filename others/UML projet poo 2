@startuml

!theme vibrant
top to bottom direction
skinparam linetype ortho

package model{
  abstract class Model{
   
  }

  class Angry {
  + Angry() 
}
class Attack {
  + Attack(String[], Game) 
  + execute(): boolean
}
class Backpack {
  + Backpack() 
  + Backpack(int, int) 
  + DEFAULT_MAX_CAPACITY: int
  + DEFAULT_WEIGHT: int
  + DEFAULT_MAX_NB_ITEMS: int
}
class BaseballBat {
  + BaseballBat() 
}
class Cake {
  + Cake() 
}
abstract class Character{
  + Character(int, int) 
  # health: int
  + MAXHEALTH: int
  + setShield(Protection): void
  + isKO(): boolean
  + getWeapon(): Weapon
  + setHealth(int): void
  + getHealth(): int
  + getShield(): Protection
  + setWeapon(Weapon): void
}
class Chest {
  + Chest() 
  + Chest(int, int) 
  + DEFAULT_WEIGHT: int
  + DEFAULT_MAX_CAPACITY: int
  + DEFAULT_MAX_NB_ITEMS: int
}
class Colossus {
  + Colossus() 
}
class Command {
  + Command(String, Game, Scanner) 
  + Command() 
  # scan: Scanner
  # commands: String[]
  + {static}confirmation(Scanner): boolean
  + execute(): boolean
  + getCommands(): String[]
}
abstract class Consumable {
  + Consumable(int, int) 
  + HP_RESTORED: int
  + consume(Hero): void
}
abstract class Container {
  # Container(int, int, int) 
  + MAX_CAPACITY: int
  - capacity: int
  + MAX_NB_ITEMS: int
  - nb_items: int
  + isFull(): boolean
  + {static}getItemPlace(Item, Container): int
  + toString(): String
  + addItem(Item): boolean
  + removeItem(Item): void
  + tooHeavy(Item): boolean
  + getCapacity(): int
  + getNbItems(): int
  + getNthItem(int): int
  + setCapacity(int): void
  + setNbItems(int): void
  + fillContainer(int): void
  + open(): void
  + displayContent(): void
}
class Crate {
  + Crate() 
  + Crate(int, int) 
  + DEFAULT_MAX_CAPACITY: int
  + DEFAULT_MAX_NB_ITEMS: int
  + open: boolean
  + DEFAULT_WEIGHT: int
  + open(Crowbar, Scanner): boolean
  + getOpen(): boolean
  + addItem(Item): boolean
  + removeItem(Item): void
  + displayContent(): void
  + getNthItem(int): void
}
class Crowbar {
  + Crowbar() 
  + use(Backpack, Scanner): boolean
}
enum DamageType << enumeration >> {
  + DamageType() 
  + BLUNT 
  + PIERCING 
  + KEEN
  + valueOf(String): DamageType
  + values(): DamageType[]
}
class Dried {
  + Dried() 
}
class Drop {
  + Drop(String[], Game)
  + execute(): boolean
}
class Equip {
  + Equip(String[], Game)
  - fstArg: int
  - scdArg: int
  + execute(): boolean
}
class Exit {
  + Exit(Location, Location) 
  + toString(): String
}
abstract class Food {
  + Food(int, int) 
}
class Fruit {
  + Fruit() 
}
class Game {
  + Game()
  - isWon: boolean
  - isEnd: boolean
  + isLost(): boolean
  + displayEnd(): void
  + getHero(): Hero
  + start(): void
  + forfait(boolean): void
  + getCurLocation(): Location
  + setCurLocation(Location): void
  + isWon(): boolean
  + isEnd(): boolean
  + displayCurLocation(): void
}
class GameMap {
  + GameMap():
  + getStartLoc(): Location
  + getEndLoc(): Location
  + {static}buildMap(): void
}
class Go {
  + Go(String[], Game, Scanner) 
  - nbExits: int
  - arg: int
  + help(): void
  + execute(): boolean
}
class Gun {
  + Gun() 
}
class Help {
  + Help(Game) 
  + execute(): boolean
}
class Hero {
  + Hero() 
  + dropProtection(Location): void
  + toString(): String
  + {static}gBackpack(): Backpack
  + attack(Character): boolean
  + dropWeapon(Location): void
  + equipWeapon(Weapon): void
  + switchBackpack(Backpack, Location): void
}
abstract class Item {
  + Item(int) 
  + WEIGHT: int
  + toString(): String
  + {static}randomItem(): Item
  + {static}NonContainerRI(): Item
  + {static}isContainer(Item): boolean
}
class Location {
  + Location(LocationName) 
  + description: String
  + setExits(Exit[]): void
  + getExits(): ArrayList<Exit>
  + getMonster(): Monster
  + {static}pontNeuf(Location): void
  + {static}beaulieu(Location): void
  + addExit(Exit, Integer): void
  + {static}cityCenter(Location): void
  + getName(): LocationName
  + {static}gibauderie(Location): void
  + removeMonsterIfKO(): void
  + {static}westPoitiers(Location): void
  + {static}miletrie(Location): void
  + addItem(Item): void
  + toString(): String
  + {static}troisCites(Location): void
  + {static}finalExit(Location): void
  + {static}montbernage(Location): void
  + {static}couronneries(Location): void
  + {static}saintEloi(Location): void
  + displayExits(): void
  + {static}southPoitiers(Location): void
  + removeItem(Item): void
  + {static}northPoitiers(Location): void
  + displayLocation(): void
}
enum LocationName <<enumeration>>{
  + PONT_NEUF 
  + GIBAUDERIE 
  + SAINT_ELOI 
  + SOUTH_POITIERS 
  + FINAL_EXIT
  + TROIS_CITES 
  + COURONNERIES 
  + WEST_POITIERS 
  + MILETRIE 
  + BEAULIEU 
  + NORTH_POITIERS 
  + CITY_CENTER 
  + MONTBERNAGE 
  + valueOf(String): LocationName
  + values(): LocationName[]
}
class Look {
  + Look(String[], Game)
  + Look(Game) 
  + execute(boolean): boolean
}

class Meat {
  + Meat() 
}
class Medicine {
  + Medicine() 
}
class Message {
  + Message() 
  + {static}gameLost(): String
  + {static}opening(): String
  + {static}useCrowbar(): String
  + {static}itList(): String
  + {static}toolRequired(): String
  + {static}herosHP(Character): String
  + {static}contFull(Item): String
  + {static}failOpening(): String
  - {static}getDAux(LocationName): String
  + {static}gameWon(): String
  + {static}monsterApparition(Character): String
  + {static}startgame(Location, Location): String
  + {static}NoWeapon(): String
  + {static}invalidCommand(): String
  + {static}monsterHP(Character): String
  + {static}handFull(Item): String
  + {static}InvalidNumber(int): String
  + {static}monsterAttack(Character, Character): String
  + {static}locationDescription(Location): String
  + {static}noSpace(Item, Item): String
  + {static}getDescription(Location): String
  + {static}warning(): String
  + {static}InvalidItem(): String
  + {static}wrongItem(String): String
  + {static}crowbarUsed(): String
}
abstract class Monster {
  + Monster(int, int, int)
  # monsterDamage: int
  + toString(): String
  + getMonsterDamage(): int
  + attack(Character): void
  + {static}randMonster(): Monster
  + getDamage(): int
}
class Protection {
  + Protection()
  + DEFAULT_WEIGHT: int
  + DEFAULT_DAMAGE_REDUCTION: double
  + DAMAGE_REDUCTION: double
  + protect(int, DamageType): int
}
class Quit {
  + Quit(String[], Game) 
  + execute(): boolean
}
class Sword {
  + Sword() 
}
class Take {
  + Take(String[], Game) 
  - nb_arg: int
  + execute(): boolean
}
class Use {
  + Use(String[], Game, Scanner) 
  - nb_arg: int
  + execute(): boolean
}
abstract class Weapon {
  + Weapon(int, int, DamageType) 
  - damage: int
  + getDamage(): int
}

package modelEditor{
  
  }
  
  package modelGameOver{
  
  }
  
  package modelHallOfFame{
  
  }
  
  package modelConfig{
  
  }

}

package view{
  package viewEditor{
  
  }
  
  package viewGameOver{
  
  }
  
  package viewHallOfFame{
  
  }
  
  package viewConfig{
  
  }
  
  class BorderWithButtons{
  
  }
  
  class FrameGame{
  
  }
  
  class MainScene{
  
  }
  
  abstract class View{
    
  }
  
}

package controller{
  abstract class Controller{
  
  }
  
  package controllerEditor{
  
  }
  
  package controllerGameOver{
  
  }
  
  package controllerHallOfFame{
  
  }
  
  package controllerConfig{
  
  }
}

View *-[#595959,plain]- "C"  Controller
Model *-[#595959,plain]- "C" Controller
Controller *-[#000082,plain]- "A" Model
Controller *-[#000082,plain]- "A" View

Angry         -[#000082,plain]-^  Monster      
Attack        -[#000082,plain]-^  Command      
Backpack      -[#000082,plain]-^  Container    
BaseballBat   -[#000082,plain]-^  Weapon       
Cake          -[#000082,plain]-^  Food         
Character     *-[#595959,plain]-> "shield\n1" Protection   
Character     *-[#595959,plain]-> "weapon\n1" Weapon       
Chest         -[#000082,plain]-^  Container    
Colossus      -[#000082,plain]-^  Monster      
Command       *-[#595959,plain]-> "game\n1" Game         
Consumable    -[#000082,plain]-^  Item         
Container     -[#000082,plain]-^  Item         
Container     *-[#595959,plain]-> "itemList\n*" Item         
Crate         -[#000082,plain]-^  Container    
Crowbar       -[#000082,plain]-^  Item         
Dried         -[#000082,plain]-^  Monster      
Drop          -[#000082,plain]-^  Command      
Equip         -[#000082,plain]-^  Command      
Exit          *-[#595959,plain]-> "destination\n1" Location     
Food          -[#000082,plain]-^  Consumable   
Fruit         -[#000082,plain]-^  Food         
Game          *-[#595959,plain]-> "map\n1" GameMap      
Game          *-[#595959,plain]-> "HERO\n1" Hero         
Game          *-[#595959,plain]-> "currentLocation\n1" Location     
GameMap       *-[#595959,plain]-> "locations\n*" Location     
Go            -[#000082,plain]-^  Command      
Go            *-[#595959,plain]-> "exits\n*" Exit         
Gun           -[#000082,plain]-^  Weapon       
Help          -[#000082,plain]-^  Command      
Hero          *-[#595959,plain]-> "backpack\n1" Backpack     
Hero          -[#000082,plain]-^  Character    
Location      *-[#595959,plain]-> "exits\n*" Exit         
Location      *-[#595959,plain]-> "itemList\n*" Item         
Location      *-[#595959,plain]-> "name\n1" LocationName 
Location      *-[#595959,plain]-> "monster\n1" Monster      
Look          -[#000082,plain]-^  Command      
Meat          -[#000082,plain]-^  Food         
Medicine      -[#000082,plain]-^  Consumable   
Monster       -[#000082,plain]-^  Character    
Protection    -[#000082,plain]-^  Item         
Quit          -[#000082,plain]-^  Command      
Sword         -[#000082,plain]-^  Weapon       
Take          -[#000082,plain]-^  Command      
Use           -[#000082,plain]-^  Command      
Weapon        *-[#595959,plain]-> "type\n1" DamageType   
Weapon        -[#000082,plain]-^  Item         

@enduml
